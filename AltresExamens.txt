:- use_module(library(clpfd)).

% Now you are flying back from China, and you should write such a program to compute how many
% units of each one of six products you should take in your suitcase with capacity 80Kg, if you want
% to maximize the total value, and the products have the following weights (Kg) and values (Euros):
%           p1  p2  p3  p4  p5  p6
%   ------------------------------
%   weight: 1   2   3   5   6   7
%   value:  1   4   7   11  14  15

china:- L = [A,B,C,D,E,F],
L ins 0 .. 80, 1*A + 2*B + 3*C + 5*D + 6*E + 7*F #=< 80,
labeling( [ max( 1*A + 4*B + 7*C + 11*D + 14*E + 15*F ) ], L ), write(L), nl,!.

--------------------------------------------------------------------------------------

Consider an n × n chessboard (for any natural number n > 3, not necessarily 8), where n is defined by a Prolog clause boardSize(n). (for example, boardSize(14) if if n = 14). Define a Prolog predicate horse(I1,J1,I2,J2) that writes the shortest possible sequence of positions that a horse of chess traverses to go from initial position I1,J1 to final position I2,J2 on the board (positions are (row,column), each one in 1..n). It must write the sequence in the right order, the first position being [I1,J1], and write “no solution” if no such a sequence exists.

horse(I1,J1,I2,J2):-
    boardSize(N), NumSquares is N*N,
    between(0,NumSquares,K),
    path( [I1,J1], [I2,J2], [[I1,J1]], Path ),
    length(Path,K),
    reverse(Path,Path1),
    write(Path1).
horse(_,_,_,_):- write(’no solution’).

path( E,E, C,C ).
path( CurrentState, FinalState, PathSoFar, TotalPath ):-
    oneStep( CurrentState, NextState ),
    \+member(NextState,PathSoFar),
    path( NextState, FinalState, [NextState|PathSoFar], TotalPath ).


reverse([],[]).
reverse([X|L],L1):- reverse(L,L2), append(L2,[X],L1),!.


exists(I,J):- boardSize(N), between(1,N,I), between(1,N,J).

oneStep( [I1,J1], [I2,J2] ):- I2 is I1+1, J2 is J1+2, exists(I2,J2).
oneStep( [I1,J1], [I2,J2] ):- I2 is I1-1, J2 is J1+2, exists(I2,J2).
oneStep( [I1,J1], [I2,J2] ):- I2 is I1+1, J2 is J1-2, exists(I2,J2).
oneStep( [I1,J1], [I2,J2] ):- I2 is I1-1, J2 is J1-2, exists(I2,J2).
oneStep( [I1,J1], [I2,J2] ):- J2 is J1+1, I2 is I1+2, exists(I2,J2).
oneStep( [I1,J1], [I2,J2] ):- J2 is J1-1, I2 is I1+2, exists(I2,J2).
oneStep( [I1,J1], [I2,J2] ):- J2 is J1+1, I2 is I1-2, exists(I2,J2).
oneStep( [I1,J1], [I2,J2] ):- J2 is J1-1, I2 is I1-2, exists(I2,J2).


--------------------------------------------------------------------------------------

GRAPH COLORING PROBLEM

main:- numVertices(N),edges(Edges), listOfNPrologVars(N,Vars), numColors(K),
Vars ins 1..K,
makeConstraints(Edges,Vars),
label(Vars), write(Vars), nl.
makeConstraints([],_).
makeConstraints( [ U-V | Edges ], Vars ):-
nth1( U, Vars, VarU ),
nth1( V, Vars, VarV ),
VarU #\= VarV,
makeConstraints(Edges,Vars).
listOfNPrologVars(0,[]):-!.
listOfNPrologVars(N,[_|Vars]):- N1 is N-1, listOfNPrologVars(N1,Vars).


--------------------------------------------------------------------------------------

We have three dice (a die in Spanish is “dado”, and the plural of die is dice). They are fair (each
one of their six sides has the same probability of coming up) and their sides have numbers between
1 and 9 (not between 1 and 6!). Now suppose we play a game (many times): I pick a die; after that,
you pick another die, we roll both dice, and the player who gets the highest number receives one Euro
from the other player. Can you design the dice (putting the numbers on them) in such a way that you
can become rich, that is, so that you can always pick a die that is better than mine (here better means
that it wins with probability p > 0.5)? Write a Prolog program that checks whether this is possible
or not. Include all non-predefined predicates you use.
To make the problem easier, assume that die A has number A1 on two of its sides, A2 on two sides
and A3 on two sides, and similarly, die B has B1, B2, B3 and die C has C1, C2 and C3 (each number
on two sides), where all nine numbers A1,A2,A3, B1,B2,B3, C1,C2,C3 are different and between 1 and
9. Also note that die A is better than die B if A wins in at least five of the nine possible outcomes
(A1,B1),(A1,B2),...,(A3,B3), and that you have to make die A better than die B, die B better than
C, and C better than A.
Answer:


p:-
    permutation( [1,2,3,4,5,6,7,8,9], [A1,A2,A3, B1,B2,B3, C1,C2,C3] ,
    wins( [A1,A2,A3], [B1,B2,B3] ),
    wins( [B1,B2,B3], [C1,C2,C3] ),
    wins( [C1,C2,C3], [A1,A2,A3] ),
    nl, write( [A1,A2,A3]-[B1,B2,B3]-[C1,C2,C3] ), nl, halt.
   
wins(A,B):- findall( X-Y, (member(X,A),member(Y,B),X>Y), L ), length(L,K), K>=5.
% this writes: [1,5,9]-[3,4,8]-[2,6,7]
% Well-known definitions of member, length and permutation to be added.

--------------------------------------------------------------------------------------

% Fall 2013
% We have three dice (a die in Spanish is “dado”, and the plural of die is dice). They are fair (each one of their six sides has the same probability of coming up) 
% and their sides have numbers between 1 and 9 (not between 1 and 6!). Now suppose we play a game (many times): I pick a die; after that, you pick another die, 
% we roll both dice, and the player who gets the highest number receives one Euro from the other player. Can you design the dice (putting the numbers on them) 
% in such a way that you can become rich, that is, so that you can always pick a die that is better than mine (here better means that it wins with probability p > 0.5)? 
% Write a Prolog program that checks whether this is possible or not. Include all non-predefined predicates you use. To make the problem easier, assume that die A 
% has number A1 on two of its sides, A2 on two sides and A3 on two sides, and similarly, die B has B1, B2, B3 and die C has C1, C2 and C3 (each number on two sides), 
% where all nine numbers A1,A2,A3, B1,B2,B3, C1,C2,C3 are different and between 1 and 9. Also note that die A is better than die B if A wins in at least five of the nine 
% possible outcomes (A1,B1),(A1,B2),...,(A3,B3), and that you have to make die A better than die B, die B better than C, and C better than A.

dice:- permutation([1,2,3,4,5,6,7,8,9],[A1,A2,A3,B1,B2,B3,C1,C2,C3]),
       better([A1,A2,A3],[B1,B2,B3]),
       better([B1,B2,B3],[C1,C2,C3]),
       better([C1,C2,C3],[A1,A2,A3]),
       write([A1, A2, A3] - [B1, B2, B3] - [C1, C2, C3]), nl.
       
better(D1,D2):-
    findall(A-B, (member(A,D1),member(B,D2), A > B), Lits),
    length(Lits, L),
    L >= 5.
    

--------------------------------------------------------------------------------------

% Fall 2014
% Consider two groups of 10 people each. In the first group, as expected, the percentage of people with lung 
% cancer among smokers is higher than among non-smokers. In the second group, the same is the case. 
% But if we consider the 20 people of the two groups together, then the situation is the opposite: 
% the proportion of people with lung cancer is higher among non-smokers than among smokers! 
% Can this be true? Write a little Prolog program to find it out.

num(X):- between(1,7,X).

cancer:-
    num(NFNC),
    num(NFC),
    num(FNC),
    num(FC),
    10 is NFNC + NFC + FNC + FC,
    FC/(FC+FNC) > NFC/(NFC+NFNC),
    num(NFNC2),
    num(NFC2),
    num(FNC2),
    num(FC2),
    10 is NFNC2 + NFC2 + FNC2 + FC2,
    FC2/(FC2+FNC2) > NFC2/(NFC2+NFNC2),
    (FC2+FC)/(FC2+FNC2+FC+FNC) <(NFC2+NFC)/(NFC2+NFNC2+NFC+NFNC),
    write([FC,FNC,NFC,NFNC,FC2,FNC2,NFC2,NFNC2]).
    


--------------------------------------------------------------------------------------

CABALLO 

betweenchk(X, L, R) :- L =< X, X =< R.

unPaso(N, [Px, Py], [Pxp, Pyp]) :-
    member([SaltoX, SaltoY], [[1,2],[1,-2],[-1,2],[-1,-2],[2,1],[2,-1],[-2,1],[-2,-1]]),

    Pxp is Px + SaltoX,
    betweenchk(Pxp, 1, N),

    Pyp is Py + SaltoY,
    betweenchk(Pyp, 1, N).

camino(_,_, E,E, C,C).
camino(N, L, EstadoActual, EstadoFinal, CaminoHastaAhora, CaminoTotal) :-
    length(CaminoHastaAhora, X), X < L,
    unPaso(N, EstadoActual, EstSiguiente),
    \+member(EstSiguiente, CaminoHastaAhora),
    camino(N,L, EstSiguiente, EstadoFinal, [EstSiguiente|CaminoHastaAhora], CaminoTotal).

movimientosCaballo(N, Pi, Pf, P) :-
    L is P + 1, % El estado inicial no cuenta como paso
    camino(N, L, Pi, Pf, [Pi], C),
    reverse(C, I),
    write(I).
--------------------------------------------------------------------------------------

CABALLO 2

path( E,E, C,C ).
path( CurrentState, FinalState, PathUntilNow, TotalPath ):-
oneStep( CurrentState, NextState ),
\+member(NextState,PathUntilNow),
path( NextState, FinalState, [NextState|PathUntilNow], TotalPath ).
oneStep([I1,J1],[I2,J2]):- member( [A,B], [[1,2],[2,1]] ),
member( SignA, [1,-1] ), I2 is I1 + A*SignA,
member( SignB, [1,-1] ), J2 is J1 + B*SignB, between(1,8,I2), between(1,8,J2).
shortest([I1,J1],[I2,J2]):- between(1,64,N),
path( [I1,J1], [I2,J2], [[I1,J1]], Path ), length( Path, N ), write(path), nl.



--------------------------------------------------------------------------------------

initialHour(10).
finalHour(22).
meeting( 1, [7,28,180,235], 3). % meeting 1: these four people, during 3 hours meeting( 2, [6,7,8], 2). % meeting 2: these three people, during 2 hours
... % more clauses for meetings
blocking(28,17). % person 28 cannot attend meetings at 17 o’clock
... % more clauses for blockings
numSmallRooms(8). % rooms 1-8
numLargeRooms(5). % rooms 9-13
solution:- findall([N,S,D], meeting(N,S,D), L), schedule(L,Sol), write(Sol), nl.
schedule( [], [] ).
schedule( [[N,S,D]|L], [[N,S,D,Hour,Room]|Sched] ):-
    schedule(L,Sched),
    initialHour(IH), finalHour(FH), FH1 is FH-D, between(IH,FH1,Hour),
    \+blockingProblem(Hour,S,D), % no blocking problem
    length(S,Num), room(Num,Room), % Room is a adequate for Num people
    \+roomsOverlap(D,Hour,Room, Sched), % no room overlapping problem
    \+attendantsOverlap(S,D,Hour, Sched). % no attendants overlapping problem



room(N,R):-N<26,!,numSmallRooms(S),numLargeRooms(L), T is S+L, between(1,T,R).
room(N,R):-N<51, numSmallRooms(S),numLargeRooms(L), T is S+L, K is S+1, between(K,T,R).

blockingProblem(H,S,D):- End is H+D-1, member(J,S), blocking(J,X), between(H,End,X).

attendantsOverlap(S,D,H, Sched):- member([_,S2,D2,H2,_],Sched), member(J,S),member(J,S2),
    End is H+D-1, End2 is H2+D2-1, between(H,End,X), between(H2,End2,X).
roomsOverlap( D,H,R, Sched):- member([_, _,D2,H2,R],Sched),
    End is H+D-1, End2 is H2+D2-1, between(H,End,X), between(H2,End2,X).


--------------------------------------------------------------------------------------


buy(E,P):- nat(N), subset(P,S), length(S,N), coveredBy(E,S),
write(’Number of packs: ’), write(N), nl, write(S), nl.
% coveredBy(E,S): "each tool of E is in some pack of S"
coveredBy( [], _ ).
coveredBy( [X|L], S ):- member(P,S), member(X,P), coveredBy(L,S).
nat(0).
nat(N):- nat(N1), N is N1+1.
subset( [], [] ).
subset( [X|L], [X|S] ):- subset(L,S).
subset( [_|L], S ):- subset(L,S).


--------------------------------------------------------------------------------------
subset(0,_,[]):-!.
subset(N,[X|L],[X|S]):- N1 is N-1, subset(N,L,S).
subset(N,[X|L], S ):- subset(N,L,S).
listNumbers(0,[]):-!.
listNumbers(N,[N|L]):- N1 is N-1, listNumbers(N1,L).
list200(L):- listNumbers(500000,LNums), subset(200,LNums,L).


friendsforever:- list200(L), allfriends(L,L), write(L), nl.
allfriends([],_).
allfriends([X|Rest],L):- friends(X,FrX), isSubset(L,FrX), allfriends(Rest,L).
isSubset([],_).
isSubset([X|Rest],L):- member(X,L), isSubset(Rest,L).

friendsforever:- friends(X,FrX), ff([X],[X|FrX],L), write(L), nl.
%the 1st argument L of ff is input, the list built so far.
%The 2nd one I is the intersection of all friends of the members of L
%The 3rd one L1 is the output list.
ff(L,_,L):- length(L,200),!.
ff(L,I,L1):- member(X,I), \+member(X,L), friends(X,FrX), isSubset(L,Frx),
intersection(I,[X|Frx],I1), length(I1,K), K>=200, ff([X|L],I1,L1).
intersection([],_,[]).
intersection([X|L],L1,[X|I]):- member(X,L1), !, intersection(L,L1,I).
intersection([_|L],L1, I ):- intersection(L,L1,I).


--------------------------------------------------------------------------------------
